public class SendBatchEmails {

    // Define a class to handle the input from Flow
    public class EmailDetails {
        @InvocableVariable(label='To Addresses List' description='List of recipient email addresses')
        public List<String> toAddresses;  // List of recipient email addresses

        @InvocableVariable(label='To Addresses Collection' description='List of records (Contacts, Cases, Campaign Members) whose emails will be sent to.')
        public List<SObject> toAddressesCollection;  // List of SObjects (generic, can include Contacts, Cases, Campaign Members)

        @InvocableVariable(required=true label='Email Subject')
        public String subject;

        @InvocableVariable(required=true label='Email Body')
        public String body;

        @InvocableVariable(label='Send as Rich Text' description='If true, sends the email as Rich Text (HTML). If false or empty, sends as Plain Text.')
        public Boolean isRichText;  // Boolean flag to determine email format (optional)

        @InvocableVariable(label='CC Addresses List' description='A text collection of CC email recipients.')
        public List<String> ccAddresses;  // List of CC email addresses (optional)

        @InvocableVariable(label='BCC Addresses List' description='A text collection of BCC email recipients.')
        public List<String> bccAddresses;  // List of BCC email addresses (optional)

        @InvocableVariable(label='Sender Email Address' description='The email address of the sender. If completed, Sender Type should also be completed.')
        public String senderEmailAddress;  // Custom sender email address (optional)

        @InvocableVariable(label='Sender Type' description='If used please input one of the following: CurrentUser, DefaultWorkflowUser, or OrgWideEmailAddress.')
        public String senderType;  // Sender type (optional)

        @InvocableVariable(label='Log Email Against Record' description='If true, logs the email as an activity against the appropriate record (e.g., Contact, Case, Campaign Member).')
        public Boolean logEmailAgainstRecord;  // Flag to indicate if email should be logged (optional)

        @InvocableVariable(label='File IDs' description='A record collection of ContentDocument records. These files will be attached to each email sent via the Apex Class.')
        public List<Id> fileIds;  // List of ContentDocument IDs to attach to the email (optional)
    }

    // Method to be called from Salesforce Flow
    @InvocableMethod(label='Send Batch Emails' description='Sends an email to a list of recipients with customizable sender email, sender type, and the option to send as Plain Text or Rich Text, including CC and BCC. Optionally logs the email as an activity against the appropriate record. Note: Admins must complete the Object for "To Addresses Collection" (Input) parameter even if they do not plan to use one. This is currently a limitation of Flow Builder')
    public static void sendBatchEmails(List<EmailDetails> emailDetailsList) {
        // Process each email detail record
        for (EmailDetails details : emailDetailsList) {
            sendAndLogEmails(details.toAddresses, details.toAddressesCollection, details.subject, details.body, details.isRichText, details.ccAddresses, details.bccAddresses, details.senderEmailAddress, details.senderType, details.logEmailAgainstRecord, details.fileIds);
        }
    }

    // Helper method to send an email and log it as an EmailMessage against a Case or Task against Contacts/Campaign Members
    private static void sendAndLogEmails(List<String> toAddresses, List<SObject> toAddressesCollection, String emailSubject, String emailBody, Boolean isRichText, List<String> ccAddresses, List<String> bccAddresses, String senderEmailAddress, String senderType, Boolean logEmailAgainstRecord, List<Id> fileIds) {
        // Combine To Addresses List and To Addresses Collection
        if (toAddresses == null) {
            toAddresses = new List<String>();
        }
        List<Id> contactIdsForLogging = new List<Id>();
        List<Id> caseIdsForLogging = new List<Id>();

        if (toAddressesCollection != null && !toAddressesCollection.isEmpty()) {
            for (SObject record : toAddressesCollection) {
                if (record instanceof Contact) {
                    Contact contact = (Contact)record;
                    if (contact.Email != null) {
                        toAddresses.add(contact.Email);
                        if (logEmailAgainstRecord == true) {
                            contactIdsForLogging.add(contact.Id);
                        }
                    }
                } else if (record instanceof Case) {
                    Case caseRecord = (Case)record;
                    if (caseRecord.ContactId != null) {
                        Contact contact = [SELECT Email FROM Contact WHERE Id = :caseRecord.ContactId LIMIT 1];
                        if (contact.Email != null) {
                            toAddresses.add(contact.Email);
                            if (logEmailAgainstRecord == true) {
                                caseIdsForLogging.add(caseRecord.Id);
                            }
                        }
                    }
                } else if (record instanceof CampaignMember) {
                    CampaignMember campaignMember = (CampaignMember)record;
                    if (campaignMember.ContactId != null) {
                        Contact contact = [SELECT Email FROM Contact WHERE Id = :campaignMember.ContactId LIMIT 1];
                        if (contact.Email != null) {
                            toAddresses.add(contact.Email);
                            if (logEmailAgainstRecord == true) {
                                contactIdsForLogging.add(contact.Id);
                            }
                        }
                    }
                }
            }
        }

        // If no toAddresses are available after combining, throw an exception
        if (toAddresses.isEmpty()) {
            throw new EmailException('No valid email addresses found in either To Addresses List or To Addresses Collection.');
        }

        // Determine the sender's email address and name
        String fromAddress = '';
        String fromName = '';
        if (senderType != null) {
            if (senderType.equalsIgnoreCase('OrgWideEmailAddress') && senderEmailAddress != null) {
                // Set the Org-Wide Email Address ID
                OrgWideEmailAddress orgWideEmail = [SELECT Id, Address, DisplayName FROM OrgWideEmailAddress WHERE Address = :senderEmailAddress LIMIT 1];
                if (orgWideEmail != null) {
                    fromAddress = orgWideEmail.Address;
                    fromName = orgWideEmail.DisplayName;
                }
            } else if (senderType.equalsIgnoreCase('DefaultWorkflowUser')) {
                // Handle the Default Workflow User
                fromAddress = senderEmailAddress != null ? senderEmailAddress : UserInfo.getUserEmail();
                fromName = UserInfo.getName();
            } else {
                // Default to Current User
                fromAddress = UserInfo.getUserEmail();
                fromName = UserInfo.getName();
            }
        }

        // Create and send the email
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.setToAddresses(toAddresses);
        mail.setSubject(emailSubject);

        // Set the replyTo only if fromAddress is valid
        if (fromAddress != null && fromAddress != '') {
            mail.setReplyTo(fromAddress);
        }

        // Set the body based on the format choice
        String plainTextBody = stripHtmlTags(emailBody);  // Strip HTML tags for logging and plain text
        if (isRichText != null && isRichText == true) {
            mail.setHtmlBody(emailBody);  // Send as Rich Text (HTML)
        } else {
            mail.setPlainTextBody(plainTextBody);  // Send as Plain Text
        }

        // Set CC addresses if provided
        if (ccAddresses != null && !ccAddresses.isEmpty()) {
            mail.setCcAddresses(ccAddresses);
        }

        // Set BCC addresses if provided
        if (bccAddresses != null && !bccAddresses.isEmpty()) {
            mail.setBccAddresses(bccAddresses);
        }

        // Add file attachments if provided
        if (fileIds != null && !fileIds.isEmpty()) {
            List<Messaging.EmailFileAttachment> attachments = new List<Messaging.EmailFileAttachment>();
            for (Id fileId : fileIds) {
                ContentVersion contentVersion = [SELECT VersionData, Title, FileExtension FROM ContentVersion WHERE ContentDocumentId = :fileId ORDER BY VersionNumber DESC LIMIT 1];
                if (contentVersion != null) {
                    Messaging.EmailFileAttachment attachment = new Messaging.EmailFileAttachment();
                    attachment.setFileName(contentVersion.Title + '.' + contentVersion.FileExtension);
                    attachment.setBody(contentVersion.VersionData);
                    attachments.add(attachment);
                }
            }
            mail.setFileAttachments(attachments);
        }

        // Send the email
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });

        // Optionally log the email as an EmailMessage for Cases or a Task for Contacts/Campaign Members
        if (logEmailAgainstRecord == true) {
            List<EmailMessage> emailMessages = new List<EmailMessage>();
            List<Task> tasks = new List<Task>();

            // Log against Contacts (as Task)
            for (Id contactId : contactIdsForLogging) {
                Task task = new Task(
                    WhoId = contactId,
                    Subject = 'Email: ' + emailSubject,
                    Description = plainTextBody,
                    Status = 'Completed',
                    Priority = 'Normal',
                    ActivityDate = Date.today(),
                    Type = 'Email'
                );
                tasks.add(task);
            }

            // Log against Cases (as EmailMessage)
            for (Id caseId : caseIdsForLogging) {
                EmailMessage em = new EmailMessage(
                    BccAddress = bccAddresses != null ? String.join(bccAddresses, ',') : null,
                    CcAddress = ccAddresses != null ? String.join(ccAddresses, ',') : null,
                    FromAddress = fromAddress != null && fromAddress != '' ? fromAddress : UserInfo.getUserEmail(), // Fallback to User Email if fromAddress is empty
                    FromName = fromName != null && fromName != '' ? fromName : UserInfo.getName(), // Fallback to User Name if fromName is empty
                    HtmlBody = isRichText != null && isRichText == true ? emailBody : null,
                    MessageDate = DateTime.now(),
                    RelatedToId = caseId,
                    Subject = emailSubject,
                    TextBody = isRichText != null && isRichText == false ? plainTextBody : emailBody, // If not rich text, use plain text; otherwise, fallback to original content
                    ToAddress = String.join(toAddresses, ',')
                );
                emailMessages.add(em);
            }

            // Insert Tasks and EmailMessages
            if (!tasks.isEmpty()) {
                insert tasks;
            }
            if (!emailMessages.isEmpty()) {
                insert emailMessages;
            }
        }
    }

    // Utility method to strip HTML tags
    private static String stripHtmlTags(String htmlText) {
        if (htmlText == null) {
            return null;
        }
        // Remove HTML tags
        return htmlText.replaceAll('<[^>]*>', '');
    }

    // Custom exception class for email errors
    public class EmailException extends Exception {}
}
